
self driving car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000ad6  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800078  00800078  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb0  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0f  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5d  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000799  00000000  00000000  0000478c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010be  00000000  00000000  00004f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005fe3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile uint32_t distance_front_the_ultra=0;//variable to get the distance of object front the ultrasonic
	

int main(void)
{
	LCD_Initialization();
  92:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Initialization>
	ServoMotor_Initialization();
  96:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ServoMotor_Initialization>
	Motor_Initialization();
  9a:	0e 94 4e 01 	call	0x29c	; 0x29c <Motor_Initialization>
	LCD_Clear();
  9e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Clear>
	while (1)
	{
		
		LCD_Clear();
  a2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Clear>
		distance_front_the_ultra=Ultrasonic();
  a6:	0e 94 14 03 	call	0x628	; 0x628 <Ultrasonic>
  aa:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
  ae:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__data_end+0x1>
  b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end+0x2>
  b6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x3>
		LCD_Write_Number(distance_front_the_ultra);
  ba:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
  be:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__data_end+0x1>
  c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end+0x2>
  c6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x3>
  ca:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_Write_Number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	83 ec       	ldi	r24, 0xC3	; 195
  d2:	99 e0       	ldi	r25, 0x09	; 9
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4c>
  de:	00 00       	nop
		_delay_ms(200);
		
		
		distance_front_the_ultra=Ultrasonic();//to get the distance of object front the ultrasonic
  e0:	0e 94 14 03 	call	0x628	; 0x628 <Ultrasonic>
  e4:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
  e8:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__data_end+0x1>
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end+0x2>
  f0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x3>
		//LCD_Write_Number(distance_front_the_ultra);
		if(distance_front_the_ultra>=35)
  f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
  f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
  fc:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 100:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 104:	83 97       	sbiw	r24, 0x23	; 35
 106:	a1 05       	cpc	r26, r1
 108:	b1 05       	cpc	r27, r1
 10a:	f8 f0       	brcs	.+62     	; 0x14a <main+0xb8>
		{
			Motor_Start(Motor1, Motor_CW);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 6d 01 	call	0x2da	; 0x2da <Motor_Start>
			Motor_Start(Motor2, Motor_CW);//move forward
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 6d 01 	call	0x2da	; 0x2da <Motor_Start>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	9a ee       	ldi	r25, 0xEA	; 234
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x8e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x94>
 126:	00 00       	nop
			_delay_ms(15);
			Motor_Stop(Motor1);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
			Motor_Stop(Motor2);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
			LCD_Write_String("forward");
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_Write_String>
 13c:	8f e5       	ldi	r24, 0x5F	; 95
 13e:	9a ee       	ldi	r25, 0xEA	; 234
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xae>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xb4>
 146:	00 00       	nop
 148:	ac cf       	rjmp	.-168    	; 0xa2 <main+0x10>
			_delay_ms(15);
		}
		else if (distance_front_the_ultra<15)
 14a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 14e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 152:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 156:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 15a:	0f 97       	sbiw	r24, 0x0f	; 15
 15c:	a1 05       	cpc	r26, r1
 15e:	b1 05       	cpc	r27, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <main+0xd2>
 162:	9f cf       	rjmp	.-194    	; 0xa2 <main+0x10>
		{
			ServoMotor_Rotate(90);//rotate the servo 90 degree to the right
 164:	8a e5       	ldi	r24, 0x5A	; 90
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ServoMotor_Rotate>
			distance_front_the_ultra=Ultrasonic();//to get new value after rotation
 16c:	0e 94 14 03 	call	0x628	; 0x628 <Ultrasonic>
 170:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
 174:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__data_end+0x1>
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end+0x2>
 17c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x3>
			                    if(distance_front_the_ultra>=15)
 180:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 184:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 188:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 18c:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 190:	0f 97       	sbiw	r24, 0x0f	; 15
 192:	a1 05       	cpc	r26, r1
 194:	b1 05       	cpc	r27, r1
 196:	d8 f0       	brcs	.+54     	; 0x1ce <main+0x13c>
			                    {
									   LCD_Clear();
 198:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Clear>
									   LCD_Write_String("right");
 19c:	88 e6       	ldi	r24, 0x68	; 104
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_Write_String>
				                       Motor_Start(Motor1,Motor_CW);//move right
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 6d 01 	call	0x2da	; 0x2da <Motor_Start>
			                           Motor_Stop(Motor1);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	23 ed       	ldi	r18, 0xD3	; 211
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x126>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x130>
 1c2:	00 00       	nop
									    _delay_ms(1000);//////////////////////////////////////////////////////////////
				                       ServoMotor_Rotate(-90);//to return to the initial position 
 1c4:	86 ea       	ldi	r24, 0xA6	; 166
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ServoMotor_Rotate>
 1cc:	5e c0       	rjmp	.+188    	; 0x28a <main+0x1f8>
									   
									  
			                    }
			                    else if (distance_front_the_ultra<15)
 1ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 1d6:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 1da:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 1de:	0f 97       	sbiw	r24, 0x0f	; 15
 1e0:	a1 05       	cpc	r26, r1
 1e2:	b1 05       	cpc	r27, r1
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <main+0x156>
 1e6:	51 c0       	rjmp	.+162    	; 0x28a <main+0x1f8>
			                    {
			                   	       ServoMotor_Rotate(-180);//to rotate servo 90 degree to the left
 1e8:	8c e4       	ldi	r24, 0x4C	; 76
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ServoMotor_Rotate>
									   distance_front_the_ultra=Ultrasonic();//to get new value after rotation  
 1f0:	0e 94 14 03 	call	0x628	; 0x628 <Ultrasonic>
 1f4:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
 1f8:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__data_end+0x1>
 1fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end+0x2>
 200:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x3>
										  if (distance_front_the_ultra>=15)
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 20c:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 210:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 214:	0f 97       	sbiw	r24, 0x0f	; 15
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	d8 f0       	brcs	.+54     	; 0x252 <main+0x1c0>
										  {
											  LCD_Clear();
 21c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Clear>
											  LCD_Write_String("left");
 220:	8e e6       	ldi	r24, 0x6E	; 110
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_Write_String>
											  Motor_Start(Motor1,Motor_CW);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 6d 01 	call	0x2da	; 0x2da <Motor_Start>
											  Motor_Stop(Motor1);//move left
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	23 ed       	ldi	r18, 0xD3	; 211
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	91 50       	subi	r25, 0x01	; 1
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x1aa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x1b4>
 246:	00 00       	nop
											    _delay_ms(1000);//////////////////////////////////////////////////////////////
											  ServoMotor_Rotate(90);//to return to the initial position
 248:	8a e5       	ldi	r24, 0x5A	; 90
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ServoMotor_Rotate>
 250:	1c c0       	rjmp	.+56     	; 0x28a <main+0x1f8>
											  
										  }
										  else if (distance_front_the_ultra<15)
 252:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 256:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 25a:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__data_end+0x2>
 25e:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__data_end+0x3>
 262:	0f 97       	sbiw	r24, 0x0f	; 15
 264:	a1 05       	cpc	r26, r1
 266:	b1 05       	cpc	r27, r1
 268:	80 f4       	brcc	.+32     	; 0x28a <main+0x1f8>
										 {
											 LCD_Clear();
 26a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Clear>
											 LCD_Write_String("Stop");
 26e:	83 e7       	ldi	r24, 0x73	; 115
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_Write_String>
											 Motor_Stop(Motor1);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
											 Motor_Stop(Motor2);//stop
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 b5 01 	call	0x36a	; 0x36a <Motor_Stop>
											 ServoMotor_Rotate(90);//to return to the initial position
 282:	8a e5       	ldi	r24, 0x5A	; 90
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ServoMotor_Rotate>
											
										 }
			                    } 
			
		   distance_front_the_ultra=0;
 28a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 28e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 292:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end+0x2>
 296:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x3>
 29a:	03 cf       	rjmp	.-506    	; 0xa2 <main+0x10>

0000029c <Motor_Initialization>:
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	65 e0       	ldi	r22, 0x05	; 5
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	64 e0       	ldi	r22, 0x04	; 4
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	66 e0       	ldi	r22, 0x06	; 6
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
 2d8:	08 95       	ret

000002da <Motor_Start>:
 2da:	cf 93       	push	r28
 2dc:	c6 2f       	mov	r28, r22
 2de:	88 23       	and	r24, r24
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <Motor_Start+0xe>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	09 f1       	breq	.+66     	; 0x328 <Motor_Start+0x4e>
 2e6:	3f c0       	rjmp	.+126    	; 0x366 <Motor_Start+0x8c>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 2f2:	cc 23       	and	r28, r28
 2f4:	19 f0       	breq	.+6      	; 0x2fc <Motor_Start+0x22>
 2f6:	c1 30       	cpi	r28, 0x01	; 1
 2f8:	61 f0       	breq	.+24     	; 0x312 <Motor_Start+0x38>
 2fa:	35 c0       	rjmp	.+106    	; 0x366 <Motor_Start+0x8c>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 310:	2a c0       	rjmp	.+84     	; 0x366 <Motor_Start+0x8c>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 326:	1f c0       	rjmp	.+62     	; 0x366 <Motor_Start+0x8c>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 332:	cc 23       	and	r28, r28
 334:	19 f0       	breq	.+6      	; 0x33c <Motor_Start+0x62>
 336:	c1 30       	cpi	r28, 0x01	; 1
 338:	61 f0       	breq	.+24     	; 0x352 <Motor_Start+0x78>
 33a:	15 c0       	rjmp	.+42     	; 0x366 <Motor_Start+0x8c>
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	65 e0       	ldi	r22, 0x05	; 5
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 350:	0a c0       	rjmp	.+20     	; 0x366 <Motor_Start+0x8c>
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	65 e0       	ldi	r22, 0x05	; 5
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	66 e0       	ldi	r22, 0x06	; 6
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <Motor_Stop>:
 36a:	88 23       	and	r24, r24
 36c:	19 f0       	breq	.+6      	; 0x374 <Motor_Stop+0xa>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	89 f0       	breq	.+34     	; 0x394 <Motor_Stop+0x2a>
 372:	08 95       	ret
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	64 e0       	ldi	r22, 0x04	; 4
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 392:	08 95       	ret
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 3b2:	08 95       	ret

000003b4 <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(ClearScreen);
}
void LCD_Write_Command(uint8_t command)
{
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
	/*Register Select pin will select control register*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RS, LCD_LOW);
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Read/Write pin will be write on LCD*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RW, LCD_LOW);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Be sure that enable is disabled*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Send high nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 3d6:	8b b3       	in	r24, 0x1b	; 27
 3d8:	9c 2f       	mov	r25, r28
 3da:	90 7f       	andi	r25, 0xF0	; 240
 3dc:	8f 70       	andi	r24, 0x0F	; 15
 3de:	89 2b       	or	r24, r25
 3e0:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 3ec:	8f e9       	ldi	r24, 0x9F	; 159
 3ee:	9f e0       	ldi	r25, 0x0F	; 15
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_Write_Command+0x3c>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_Write_Command+0x42>
 3f6:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Send low nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 402:	2b b3       	in	r18, 0x1b	; 27
 404:	30 e1       	ldi	r19, 0x10	; 16
 406:	c3 9f       	mul	r28, r19
 408:	c0 01       	movw	r24, r0
 40a:	11 24       	eor	r1, r1
 40c:	92 2f       	mov	r25, r18
 40e:	9f 70       	andi	r25, 0x0F	; 15
 410:	89 2b       	or	r24, r25
 412:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	9e e4       	ldi	r25, 0x4E	; 78
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <LCD_Initialization>:
	}
}
void LCD_Initialization(void)
{
	/*Define direction for control pins*/
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS, LCD_OUT);
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW, LCD_OUT);
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	62 e0       	ldi	r22, 0x02	; 2
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN, LCD_OUT);
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	/*Define direction for data pins*/
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D4, LCD_OUT);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D5, LCD_OUT);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D6, LCD_OUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PORT, LCD_D7, LCD_OUT);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	67 e0       	ldi	r22, 0x07	; 7
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	/*Define commands needed to choose 4Bit mode*/
	LCD_Write_Command(BITSequence1);/*Define working in 4BIT mode*/
 48a:	83 e3       	ldi	r24, 0x33	; 51
 48c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(BITSequence2);/*Define working in 4BIT mode*/
 490:	82 e3       	ldi	r24, 0x32	; 50
 492:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(BITSequence3);/*Use 4BIT mode*/
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(ReturnHome);/*Return home*/
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(DisplayON);/*Display ON, Cursor OFF*/
 4a2:	8c e0       	ldi	r24, 0x0C	; 12
 4a4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(ClearScreen);/*Clear screen*/
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
	LCD_Write_Command(IncrementRight);/*Increment cursor right*/
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
 4b4:	08 95       	ret

000004b6 <LCD_Clear>:

}
void LCD_Clear(void)
{
	LCD_Write_Command(ClearScreen);
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Write_Command>
 4bc:	08 95       	ret

000004be <LCD_Write_Character>:
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
	/*Wait controller to finish command*/
	_delay_ms(5);
}
void LCD_Write_Character(uint8_t character)
{
 4be:	cf 93       	push	r28
 4c0:	c8 2f       	mov	r28, r24
	/*Register Select pin will select data register*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RS, LCD_HIGH);
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Read/Write pin will be write on LCD*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_RW, LCD_LOW);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Be sure that enable is disabled*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Send high nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 4e0:	8b b3       	in	r24, 0x1b	; 27
 4e2:	9c 2f       	mov	r25, r28
 4e4:	90 7f       	andi	r25, 0xF0	; 240
 4e6:	8f 70       	andi	r24, 0x0F	; 15
 4e8:	89 2b       	or	r24, r25
 4ea:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 4f6:	8f e9       	ldi	r24, 0x9F	; 159
 4f8:	9f e0       	ldi	r25, 0x0F	; 15
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_Write_Character+0x3c>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_Write_Character+0x42>
 500:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	/*Send low nipple of the command, without changing old PORTA pins(0-3)*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 50c:	2b b3       	in	r18, 0x1b	; 27
 50e:	30 e1       	ldi	r19, 0x10	; 16
 510:	c3 9f       	mul	r28, r19
 512:	c0 01       	movw	r24, r0
 514:	11 24       	eor	r1, r1
 516:	92 2f       	mov	r25, r18
 518:	9f 70       	andi	r25, 0x0F	; 15
 51a:	89 2b       	or	r24, r25
 51c:	8b bb       	out	0x1b, r24	; 27
	/*Send High pulse for 1 millisecond*/
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_HIGH);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	63 e0       	ldi	r22, 0x03	; 3
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 528:	8f e9       	ldi	r24, 0x9F	; 159
 52a:	9f e0       	ldi	r25, 0x0F	; 15
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_Write_Character+0x6e>
 530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_Write_Character+0x74>
 532:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PORT, LCD_EN, LCD_LOW);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	63 e0       	ldi	r22, 0x03	; 3
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
 53e:	8f e1       	ldi	r24, 0x1F	; 31
 540:	9e e4       	ldi	r25, 0x4E	; 78
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_Write_Character+0x84>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_Write_Character+0x8a>
 548:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
	while(*str != '\0')
 554:	88 81       	ld	r24, Y
 556:	88 23       	and	r24, r24
 558:	61 f0       	breq	.+24     	; 0x572 <LCD_Write_String+0x24>
 55a:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Character(*str);
 55c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_Write_Character>
 560:	8f e3       	ldi	r24, 0x3F	; 63
 562:	9c e9       	ldi	r25, 0x9C	; 156
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <LCD_Write_String+0x16>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_Write_String+0x1c>
 56a:	00 00       	nop
	/*Wait controller to finish command*/
	_delay_ms(5);
}
void LCD_Write_String(uint8_t* str)
{
	while(*str != '\0')
 56c:	89 91       	ld	r24, Y+
 56e:	81 11       	cpse	r24, r1
 570:	f5 cf       	rjmp	.-22     	; 0x55c <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
		_delay_ms(10);
		str++;
	}
}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <LCD_Write_Number>:
void LCD_Write_Number(uint32_t number)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	2a 97       	sbiw	r28, 0x0a	; 10
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	uint8_t num[10];
	ltoa(number, (uint8_t*)num, 10);//Long To ASCII
 58c:	2a e0       	ldi	r18, 0x0A	; 10
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	ae 01       	movw	r20, r28
 592:	4f 5f       	subi	r20, 0xFF	; 255
 594:	5f 4f       	sbci	r21, 0xFF	; 255
 596:	0e 94 1d 05 	call	0xa3a	; 0xa3a <ltoa>
	LCD_Write_String(num);
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_Write_String>
}
 5a2:	2a 96       	adiw	r28, 0x0a	; 10
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <ServoMotor_Initialization>:
 5b4:	8d 9a       	sbi	0x11, 5	; 17
 5b6:	8e b5       	in	r24, 0x2e	; 46
 5b8:	80 61       	ori	r24, 0x10	; 16
 5ba:	8e bd       	out	0x2e, r24	; 46
 5bc:	8e b5       	in	r24, 0x2e	; 46
 5be:	88 60       	ori	r24, 0x08	; 8
 5c0:	8e bd       	out	0x2e, r24	; 46
 5c2:	8f b5       	in	r24, 0x2f	; 47
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	8f bd       	out	0x2f, r24	; 47
 5c8:	8f b5       	in	r24, 0x2f	; 47
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	8f bd       	out	0x2f, r24	; 47
 5ce:	8f b5       	in	r24, 0x2f	; 47
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	8f bd       	out	0x2f, r24	; 47
 5d4:	8f b5       	in	r24, 0x2f	; 47
 5d6:	8f 7b       	andi	r24, 0xBF	; 191
 5d8:	8f bd       	out	0x2f, r24	; 47
 5da:	8e b5       	in	r24, 0x2e	; 46
 5dc:	84 60       	ori	r24, 0x04	; 4
 5de:	8e bd       	out	0x2e, r24	; 46
 5e0:	8e b5       	in	r24, 0x2e	; 46
 5e2:	8d 7f       	andi	r24, 0xFD	; 253
 5e4:	8e bd       	out	0x2e, r24	; 46
 5e6:	8e b5       	in	r24, 0x2e	; 46
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	8e bd       	out	0x2e, r24	; 46
 5ec:	82 ee       	ldi	r24, 0xE2	; 226
 5ee:	94 e0       	ldi	r25, 0x04	; 4
 5f0:	97 bd       	out	0x27, r25	; 39
 5f2:	86 bd       	out	0x26, r24	; 38
 5f4:	08 95       	ret

000005f6 <ServoMotor_Rotate>:
 5f6:	46 b5       	in	r20, 0x26	; 38
 5f8:	57 b5       	in	r21, 0x27	; 39
 5fa:	9c 01       	movw	r18, r24
 5fc:	42 9f       	mul	r20, r18
 5fe:	c0 01       	movw	r24, r0
 600:	43 9f       	mul	r20, r19
 602:	90 0d       	add	r25, r0
 604:	52 9f       	mul	r21, r18
 606:	90 0d       	add	r25, r0
 608:	11 24       	eor	r1, r1
 60a:	9c 01       	movw	r18, r24
 60c:	36 95       	lsr	r19
 60e:	27 95       	ror	r18
 610:	36 95       	lsr	r19
 612:	27 95       	ror	r18
 614:	ab e7       	ldi	r26, 0x7B	; 123
 616:	b4 e1       	ldi	r27, 0x14	; 20
 618:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__umulhisi3>
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	9b bd       	out	0x2b, r25	; 43
 624:	8a bd       	out	0x2a, r24	; 42
 626:	08 95       	ret

00000628 <Ultrasonic>:
static volatile uint32_t flagg           = 0;//flagg
static volatile uint32_t sample1         = 0;
static volatile uint32_t sample2         = 0;
static volatile uint32_t count_a         = 0;
uint32_t Ultrasonic(void)
{
 628:	cf 92       	push	r12
 62a:	df 92       	push	r13
 62c:	ef 92       	push	r14
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
	DIO_SetPinDirection(TRIG_PORT, TRIG_PIN,DIO_OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	63 e0       	ldi	r22, 0x03	; 3
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_SetPinDirection>
	GICR  |=1<<INT0  ; //	Enable Peripheral interrupt
 63e:	8b b7       	in	r24, 0x3b	; 59
 640:	80 64       	ori	r24, 0x40	; 64
 642:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=1<<ISC00 ; // Any logical change on INT0 generates an interrupt request
 644:	85 b7       	in	r24, 0x35	; 53
 646:	81 60       	ori	r24, 0x01	; 1
 648:	85 bf       	out	0x35, r24	; 53
	TCCR0 |=1<<CS02  ;
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	84 60       	ori	r24, 0x04	; 4
 64e:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=1<<CS00  ;//choose pre-scaler 1024 and start timer
 650:	83 b7       	in	r24, 0x33	; 51
 652:	81 60       	ori	r24, 0x01	; 1
 654:	83 bf       	out	0x33, r24	; 51
	TIMSK |=1<<TOIE0 ; //enable OVF interrupt flag
 656:	89 b7       	in	r24, 0x39	; 57
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TCCR0, WGM01);CLR_BIT(TCCR0, WGM00);
 65c:	83 b7       	in	r24, 0x33	; 51
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	83 bf       	out	0x33, r24	; 51
 662:	83 b7       	in	r24, 0x33	; 51
 664:	8f 7b       	andi	r24, 0xBF	; 191
 666:	83 bf       	out	0x33, r24	; 51
	sei();//Enable global interrupt
 668:	78 94       	sei
	while(1)
	{
	DIO_SetPinValue(TRIG_PORT,TRIG_PIN,DIO_HIGH);//set trigger pin high
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	63 e0       	ldi	r22, 0x03	; 3
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 674:	80 e5       	ldi	r24, 0x50	; 80
 676:	8a 95       	dec	r24
 678:	f1 f7       	brne	.-4      	; 0x676 <Ultrasonic+0x4e>
	_delay_us(15);
	DIO_SetPinValue(TRIG_PORT,TRIG_PIN,DIO_LOW);//set trigger pin low
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	63 e0       	ldi	r22, 0x03	; 3
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <DIO_SetPinValue>
	count_a = flagg*256+(255-sample1)+sample2;
 684:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <flagg>
 688:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <flagg+0x1>
 68c:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <flagg+0x2>
 690:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <flagg+0x3>
 694:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <sample1>
 698:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <sample1+0x1>
 69c:	e0 90 86 00 	lds	r14, 0x0086	; 0x800086 <sample1+0x2>
 6a0:	f0 90 87 00 	lds	r15, 0x0087	; 0x800087 <sample1+0x3>
 6a4:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <sample2>
 6a8:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <sample2+0x1>
 6ac:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <sample2+0x2>
 6b0:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <sample2+0x3>
 6b4:	00 27       	eor	r16, r16
 6b6:	18 2f       	mov	r17, r24
 6b8:	29 2f       	mov	r18, r25
 6ba:	3a 2f       	mov	r19, r26
 6bc:	db 01       	movw	r26, r22
 6be:	ca 01       	movw	r24, r20
 6c0:	81 50       	subi	r24, 0x01	; 1
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	af 4f       	sbci	r26, 0xFF	; 255
 6c6:	bf 4f       	sbci	r27, 0xFF	; 255
 6c8:	80 0f       	add	r24, r16
 6ca:	91 1f       	adc	r25, r17
 6cc:	a2 1f       	adc	r26, r18
 6ce:	b3 1f       	adc	r27, r19
 6d0:	8c 19       	sub	r24, r12
 6d2:	9d 09       	sbc	r25, r13
 6d4:	ae 09       	sbc	r26, r14
 6d6:	bf 09       	sbc	r27, r15
 6d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <count_a>
 6dc:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <count_a+0x1>
 6e0:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <count_a+0x2>
 6e4:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <count_a+0x3>
	distance=count_a/58;	//distance in centimeters
 6e8:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <count_a>
 6ec:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <count_a+0x1>
 6f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <count_a+0x2>
 6f4:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <count_a+0x3>
 6f8:	2a e3       	ldi	r18, 0x3A	; 58
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodsi4>
 704:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <distance>
 708:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <distance+0x1>
 70c:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <distance+0x2>
 710:	50 93 91 00 	sts	0x0091, r21	; 0x800091 <distance+0x3>
	/*distance =(343000*((flagg*255+(255-sample1)+sample2)/2))/62500;
	LCD_Clear();
	LCD_Write_Number(distance);
	//_delay_ms(250);*/
	flagg=0;
 714:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <flagg>
 718:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <flagg+0x1>
 71c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <flagg+0x2>
 720:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <flagg+0x3>
	return distance;//return distance in centimeters
 724:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <distance>
 728:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <distance+0x1>
 72c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <distance+0x2>
 730:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <distance+0x3>
	}
}
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	ff 90       	pop	r15
 73a:	ef 90       	pop	r14
 73c:	df 90       	pop	r13
 73e:	cf 90       	pop	r12
 740:	08 95       	ret

00000742 <__vector_1>:
ISR(INT0_vect)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
	if (echo_pin_value==1)
 754:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <echo_pin_value>
 758:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <echo_pin_value+0x1>
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	89 f4       	brne	.+34     	; 0x782 <__vector_1+0x40>
	{
		sample2=TCNT0; //get the value at TCNT0 when echo low
 760:	82 b7       	in	r24, 0x32	; 50
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <sample2>
 76c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <sample2+0x1>
 770:	a0 93 82 00 	sts	0x0082, r26	; 0x800082 <sample2+0x2>
 774:	b0 93 83 00 	sts	0x0083, r27	; 0x800083 <sample2+0x3>
		echo_pin_value=0;
 778:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <echo_pin_value+0x1>
 77c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <echo_pin_value>
 780:	18 c0       	rjmp	.+48     	; 0x7b2 <__vector_1+0x70>
	}
	else if (echo_pin_value==0)
 782:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <echo_pin_value>
 786:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <echo_pin_value+0x1>
 78a:	89 2b       	or	r24, r25
 78c:	91 f4       	brne	.+36     	; 0x7b2 <__vector_1+0x70>
	{
		sample1=TCNT0 ;//get the value at TCNT0 when echo high
 78e:	82 b7       	in	r24, 0x32	; 50
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	a0 e0       	ldi	r26, 0x00	; 0
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sample1>
 79a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <sample1+0x1>
 79e:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <sample1+0x2>
 7a2:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <sample1+0x3>
		echo_pin_value=1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <echo_pin_value+0x1>
 7ae:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <echo_pin_value>
	}
	else
	{
		
	}
}
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
	if (GET_BIT(TIMSK,TOV0)==1)
 7d6:	09 b6       	in	r0, 0x39	; 57
 7d8:	00 fe       	sbrs	r0, 0
 7da:	13 c0       	rjmp	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		flagg++ ;
 7dc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <flagg>
 7e0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <flagg+0x1>
 7e4:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <flagg+0x2>
 7e8:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <flagg+0x3>
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	a1 1d       	adc	r26, r1
 7f0:	b1 1d       	adc	r27, r1
 7f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <flagg>
 7f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <flagg+0x1>
 7fa:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <flagg+0x2>
 7fe:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <flagg+0x3>
	else 
	{
		
	}
	
}
 802:	bf 91       	pop	r27
 804:	af 91       	pop	r26
 806:	9f 91       	pop	r25
 808:	8f 91       	pop	r24
 80a:	0f 90       	pop	r0
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	0f 90       	pop	r0
 810:	1f 90       	pop	r1
 812:	18 95       	reti

00000814 <DIO_SetPinDirection>:
//Include library
#include "DIO.h"
//Prototypes for functions for pin only
void DIO_SetPinDirection (Port port, Pin pin, State state)
{
	switch (state)
 814:	44 23       	and	r20, r20
 816:	19 f0       	breq	.+6      	; 0x81e <DIO_SetPinDirection+0xa>
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	c9 f1       	breq	.+114    	; 0x88e <__stack+0x2f>
 81c:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	91 f0       	breq	.+36     	; 0x846 <DIO_SetPinDirection+0x32>
 822:	28 f0       	brcs	.+10     	; 0x82e <DIO_SetPinDirection+0x1a>
 824:	82 30       	cpi	r24, 0x02	; 2
 826:	d9 f0       	breq	.+54     	; 0x85e <DIO_SetPinDirection+0x4a>
 828:	83 30       	cpi	r24, 0x03	; 3
 82a:	29 f1       	breq	.+74     	; 0x876 <__stack+0x17>
 82c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 82e:	2a b3       	in	r18, 0x1a	; 26
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_SetPinDirection+0x26>
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_SetPinDirection+0x22>
 83e:	80 95       	com	r24
 840:	82 23       	and	r24, r18
 842:	8a bb       	out	0x1a, r24	; 26
			break;
 844:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 846:	27 b3       	in	r18, 0x17	; 23
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_SetPinDirection+0x3e>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	6a 95       	dec	r22
 854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_SetPinDirection+0x3a>
 856:	80 95       	com	r24
 858:	82 23       	and	r24, r18
 85a:	87 bb       	out	0x17, r24	; 23
			break;
 85c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 85e:	24 b3       	in	r18, 0x14	; 20
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	6a 95       	dec	r22
 86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
 86e:	80 95       	com	r24
 870:	82 23       	and	r24, r18
 872:	84 bb       	out	0x14, r24	; 20
			break;
 874:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 876:	21 b3       	in	r18, 0x11	; 17
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	6a 95       	dec	r22
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	80 95       	com	r24
 888:	82 23       	and	r24, r18
 88a:	81 bb       	out	0x11, r24	; 17
			break;
 88c:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	89 f0       	breq	.+34     	; 0x8b4 <__stack+0x55>
 892:	28 f0       	brcs	.+10     	; 0x89e <__stack+0x3f>
 894:	82 30       	cpi	r24, 0x02	; 2
 896:	c9 f0       	breq	.+50     	; 0x8ca <__stack+0x6b>
 898:	83 30       	cpi	r24, 0x03	; 3
 89a:	11 f1       	breq	.+68     	; 0x8e0 <__stack+0x81>
 89c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 89e:	2a b3       	in	r18, 0x1a	; 26
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	6a 95       	dec	r22
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	82 2b       	or	r24, r18
 8b0:	8a bb       	out	0x1a, r24	; 26
			break;
 8b2:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 8b4:	27 b3       	in	r18, 0x17	; 23
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	6a 95       	dec	r22
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	82 2b       	or	r24, r18
 8c6:	87 bb       	out	0x17, r24	; 23
			break;
 8c8:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 8ca:	24 b3       	in	r18, 0x14	; 20
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	6a 95       	dec	r22
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
 8da:	82 2b       	or	r24, r18
 8dc:	84 bb       	out	0x14, r24	; 20
			break;
 8de:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 8e0:	21 b3       	in	r18, 0x11	; 17
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	6a 95       	dec	r22
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	82 2b       	or	r24, r18
 8f2:	81 bb       	out	0x11, r24	; 17
 8f4:	08 95       	ret

000008f6 <DIO_SetPinValue>:
	}
}
//If pin is defined as output
void DIO_SetPinValue (Port port, Pin pin, Status status)
{
	switch (status)
 8f6:	44 23       	and	r20, r20
 8f8:	19 f0       	breq	.+6      	; 0x900 <DIO_SetPinValue+0xa>
 8fa:	41 30       	cpi	r20, 0x01	; 1
 8fc:	c9 f1       	breq	.+114    	; 0x970 <DIO_SetPinValue+0x7a>
 8fe:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 900:	81 30       	cpi	r24, 0x01	; 1
 902:	91 f0       	breq	.+36     	; 0x928 <DIO_SetPinValue+0x32>
 904:	28 f0       	brcs	.+10     	; 0x910 <DIO_SetPinValue+0x1a>
 906:	82 30       	cpi	r24, 0x02	; 2
 908:	d9 f0       	breq	.+54     	; 0x940 <DIO_SetPinValue+0x4a>
 90a:	83 30       	cpi	r24, 0x03	; 3
 90c:	29 f1       	breq	.+74     	; 0x958 <DIO_SetPinValue+0x62>
 90e:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 910:	2b b3       	in	r18, 0x1b	; 27
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <DIO_SetPinValue+0x26>
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	6a 95       	dec	r22
 91e:	e2 f7       	brpl	.-8      	; 0x918 <DIO_SetPinValue+0x22>
 920:	80 95       	com	r24
 922:	82 23       	and	r24, r18
 924:	8b bb       	out	0x1b, r24	; 27
			break;
 926:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 928:	28 b3       	in	r18, 0x18	; 24
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_SetPinValue+0x3e>
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	6a 95       	dec	r22
 936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_SetPinValue+0x3a>
 938:	80 95       	com	r24
 93a:	82 23       	and	r24, r18
 93c:	88 bb       	out	0x18, r24	; 24
			break;
 93e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 940:	25 b3       	in	r18, 0x15	; 21
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_SetPinValue+0x56>
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	6a 95       	dec	r22
 94e:	e2 f7       	brpl	.-8      	; 0x948 <DIO_SetPinValue+0x52>
 950:	80 95       	com	r24
 952:	82 23       	and	r24, r18
 954:	85 bb       	out	0x15, r24	; 21
			break;
 956:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 958:	22 b3       	in	r18, 0x12	; 18
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_SetPinValue+0x6e>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	6a 95       	dec	r22
 966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_SetPinValue+0x6a>
 968:	80 95       	com	r24
 96a:	82 23       	and	r24, r18
 96c:	82 bb       	out	0x12, r24	; 18
			break;
 96e:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	89 f0       	breq	.+34     	; 0x996 <DIO_SetPinValue+0xa0>
 974:	28 f0       	brcs	.+10     	; 0x980 <DIO_SetPinValue+0x8a>
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	c9 f0       	breq	.+50     	; 0x9ac <DIO_SetPinValue+0xb6>
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	11 f1       	breq	.+68     	; 0x9c2 <DIO_SetPinValue+0xcc>
 97e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 980:	2b b3       	in	r18, 0x1b	; 27
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_SetPinValue+0x96>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_SetPinValue+0x92>
 990:	82 2b       	or	r24, r18
 992:	8b bb       	out	0x1b, r24	; 27
			break;
 994:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 996:	28 b3       	in	r18, 0x18	; 24
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_SetPinValue+0xac>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	6a 95       	dec	r22
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_SetPinValue+0xa8>
 9a6:	82 2b       	or	r24, r18
 9a8:	88 bb       	out	0x18, r24	; 24
			break;
 9aa:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 9ac:	25 b3       	in	r18, 0x15	; 21
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_SetPinValue+0xc2>
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	6a 95       	dec	r22
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_SetPinValue+0xbe>
 9bc:	82 2b       	or	r24, r18
 9be:	85 bb       	out	0x15, r24	; 21
			break;
 9c0:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 9c2:	22 b3       	in	r18, 0x12	; 18
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DIO_SetPinValue+0xd8>
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	6a 95       	dec	r22
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <DIO_SetPinValue+0xd4>
 9d2:	82 2b       	or	r24, r18
 9d4:	82 bb       	out	0x12, r24	; 18
 9d6:	08 95       	ret

000009d8 <__udivmodsi4>:
 9d8:	a1 e2       	ldi	r26, 0x21	; 33
 9da:	1a 2e       	mov	r1, r26
 9dc:	aa 1b       	sub	r26, r26
 9de:	bb 1b       	sub	r27, r27
 9e0:	fd 01       	movw	r30, r26
 9e2:	0d c0       	rjmp	.+26     	; 0x9fe <__udivmodsi4_ep>

000009e4 <__udivmodsi4_loop>:
 9e4:	aa 1f       	adc	r26, r26
 9e6:	bb 1f       	adc	r27, r27
 9e8:	ee 1f       	adc	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	a2 17       	cp	r26, r18
 9ee:	b3 07       	cpc	r27, r19
 9f0:	e4 07       	cpc	r30, r20
 9f2:	f5 07       	cpc	r31, r21
 9f4:	20 f0       	brcs	.+8      	; 0x9fe <__udivmodsi4_ep>
 9f6:	a2 1b       	sub	r26, r18
 9f8:	b3 0b       	sbc	r27, r19
 9fa:	e4 0b       	sbc	r30, r20
 9fc:	f5 0b       	sbc	r31, r21

000009fe <__udivmodsi4_ep>:
 9fe:	66 1f       	adc	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	1a 94       	dec	r1
 a08:	69 f7       	brne	.-38     	; 0x9e4 <__udivmodsi4_loop>
 a0a:	60 95       	com	r22
 a0c:	70 95       	com	r23
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	9b 01       	movw	r18, r22
 a14:	ac 01       	movw	r20, r24
 a16:	bd 01       	movw	r22, r26
 a18:	cf 01       	movw	r24, r30
 a1a:	08 95       	ret

00000a1c <__umulhisi3>:
 a1c:	a2 9f       	mul	r26, r18
 a1e:	b0 01       	movw	r22, r0
 a20:	b3 9f       	mul	r27, r19
 a22:	c0 01       	movw	r24, r0
 a24:	a3 9f       	mul	r26, r19
 a26:	70 0d       	add	r23, r0
 a28:	81 1d       	adc	r24, r1
 a2a:	11 24       	eor	r1, r1
 a2c:	91 1d       	adc	r25, r1
 a2e:	b2 9f       	mul	r27, r18
 a30:	70 0d       	add	r23, r0
 a32:	81 1d       	adc	r24, r1
 a34:	11 24       	eor	r1, r1
 a36:	91 1d       	adc	r25, r1
 a38:	08 95       	ret

00000a3a <ltoa>:
 a3a:	25 32       	cpi	r18, 0x25	; 37
 a3c:	31 05       	cpc	r19, r1
 a3e:	20 f4       	brcc	.+8      	; 0xa48 <ltoa+0xe>
 a40:	22 30       	cpi	r18, 0x02	; 2
 a42:	10 f0       	brcs	.+4      	; 0xa48 <ltoa+0xe>
 a44:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__ltoa_ncheck>
 a48:	fa 01       	movw	r30, r20
 a4a:	10 82       	st	Z, r1
 a4c:	ca 01       	movw	r24, r20
 a4e:	08 95       	ret

00000a50 <__ltoa_ncheck>:
 a50:	bb 27       	eor	r27, r27
 a52:	2a 30       	cpi	r18, 0x0A	; 10
 a54:	51 f4       	brne	.+20     	; 0xa6a <__ltoa_ncheck+0x1a>
 a56:	99 23       	and	r25, r25
 a58:	42 f4       	brpl	.+16     	; 0xa6a <__ltoa_ncheck+0x1a>
 a5a:	bd e2       	ldi	r27, 0x2D	; 45
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__ultoa_common>

00000a6e <__ultoa_ncheck>:
 a6e:	bb 27       	eor	r27, r27

00000a70 <__ultoa_common>:
 a70:	fa 01       	movw	r30, r20
 a72:	a6 2f       	mov	r26, r22
 a74:	62 17       	cp	r22, r18
 a76:	71 05       	cpc	r23, r1
 a78:	81 05       	cpc	r24, r1
 a7a:	91 05       	cpc	r25, r1
 a7c:	33 0b       	sbc	r19, r19
 a7e:	30 fb       	bst	r19, 0
 a80:	66 f0       	brts	.+24     	; 0xa9a <__ultoa_common+0x2a>
 a82:	aa 27       	eor	r26, r26
 a84:	66 0f       	add	r22, r22
 a86:	77 1f       	adc	r23, r23
 a88:	88 1f       	adc	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	aa 1f       	adc	r26, r26
 a8e:	a2 17       	cp	r26, r18
 a90:	10 f0       	brcs	.+4      	; 0xa96 <__ultoa_common+0x26>
 a92:	a2 1b       	sub	r26, r18
 a94:	63 95       	inc	r22
 a96:	38 50       	subi	r19, 0x08	; 8
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__ultoa_common+0x14>
 a9a:	a0 5d       	subi	r26, 0xD0	; 208
 a9c:	aa 33       	cpi	r26, 0x3A	; 58
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <__ultoa_common+0x32>
 aa0:	a9 5d       	subi	r26, 0xD9	; 217
 aa2:	a1 93       	st	Z+, r26
 aa4:	36 f7       	brtc	.-52     	; 0xa72 <__ultoa_common+0x2>
 aa6:	b1 11       	cpse	r27, r1
 aa8:	b1 93       	st	Z+, r27
 aaa:	10 82       	st	Z, r1
 aac:	ca 01       	movw	r24, r20
 aae:	0c 94 59 05 	jmp	0xab2	; 0xab2 <strrev>

00000ab2 <strrev>:
 ab2:	dc 01       	movw	r26, r24
 ab4:	fc 01       	movw	r30, r24
 ab6:	67 2f       	mov	r22, r23
 ab8:	71 91       	ld	r23, Z+
 aba:	77 23       	and	r23, r23
 abc:	e1 f7       	brne	.-8      	; 0xab6 <strrev+0x4>
 abe:	32 97       	sbiw	r30, 0x02	; 2
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <strrev+0x18>
 ac2:	7c 91       	ld	r23, X
 ac4:	6d 93       	st	X+, r22
 ac6:	70 83       	st	Z, r23
 ac8:	62 91       	ld	r22, -Z
 aca:	ae 17       	cp	r26, r30
 acc:	bf 07       	cpc	r27, r31
 ace:	c8 f3       	brcs	.-14     	; 0xac2 <strrev+0x10>
 ad0:	08 95       	ret

00000ad2 <_exit>:
 ad2:	f8 94       	cli

00000ad4 <__stop_program>:
 ad4:	ff cf       	rjmp	.-2      	; 0xad4 <__stop_program>
